{"version":3,"sources":["logo.svg","components/Email.jsx","components/Password.jsx","components/ButtonConnexion.jsx","components/CreateAccount.jsx","components/Lang.jsx","components/BlackBackground.jsx","components/TitleFb.jsx","App.js","serviceWorker.js","utils/i18n.js","index.js"],"names":["module","exports","Email","useTranslation","t","className","htmlFor","type","name","id","Password","ButtonConnexion","set_animation","onClick","CreateAccount","Lang","i18n","to","activeClassName","changeLanguage","BlackBackground","TitleFb","App","useState","openModal","setOpenModal","widthLoading","setWidthLoading","shouldCount","setShouldCount","useEffect","interval","setInterval","numberByRandom","Math","floor","random","clearInterval","exitModal","hide_body","document","querySelector","loadEl","classList","remove","style","width","add","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","init","interpolation","escapeValue","lng","resources","en","common","common_en","fr","common_fr","ReactDOM","render","StrictMode","I18nextProvider","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7681a255.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nconst Email = () => {\n\n    const [t,i18n] = useTranslation('common')\n    return (\n        <div className=\"content-input\">\n            <label htmlFor=\"\">\n                {t('enter_mobile_or_phone')}\n            </label>\n            <input type=\"text\" name=\"\" id=\"\" className=\"input\" />\n         </div>\n    )\n}\n\nexport default Email\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nconst Password = () => {\n    const [t,i18n] = useTranslation('common')\n    return (\n        <div className=\"content-input\">\n            <label htmlFor=\"\">\n                {t('enter_password')}\n            </label>\n            <input type=\"password\" name=\"\" id=\"\" className=\"input\"/>\n        </div>\n    )\n}\n\nexport default Password\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\n\n\nconst ButtonConnexion = ({set_animation}) => {\n  const [t,i18n] = useTranslation('common')\n    return (\n        <div className=\"content-button\">\n              <button type=\"submit\" className=\"button_submit\" onClick={set_animation}>\n                {t('login_text')}\n              </button>\n        </div>\n    )\n}\n\nexport default ButtonConnexion\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nconst CreateAccount = () => {\n  const [t,i18n] = useTranslation('common')\n    return (\n        <div className=\"line-or\">\n        <div className=\"line\">\n          <div className=\"box_one\">\n            <hr/>\n          </div>\n          <span>{t(\"or\")}</span>\n          <div className=\"box_two\">\n            <hr/>\n          </div>\n        </div>\n        <div className=\"create_new\">\n          <button className=\"button_create\">\n              {t('create_new_account')}\n          </button>\n        </div>\n      </div>\n    )\n}\n\nexport default CreateAccount\n","import React,{Fragment} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { NavLink,BrowserRouter as Router } from 'react-router-dom'\n\nconst Lang = () => {\n\n    const {t,i18n} = useTranslation('common')\n    return (\n       <Fragment>\n           <div className=\"lang\">\n\n              \n             \n              <Router>\n                <div className=\"main-lang\">\n                    <NavLink to=\"/mg\" className=\"text\" activeClassName=\"activeLink\">          \n                        Malagasy\n                    </NavLink>\n                    <NavLink className=\"text\"  to=\"/fr\" onClick={()=>i18n.changeLanguage('fr')} activeClassName=\"activeLink\">\n                    Fran√ßais (France)\n                    </NavLink>\n\n                    <NavLink className=\"text\" onClick={()=>i18n.changeLanguage('en')} to=\"/en\"activeClassName=\"activeLink\">\n                            English (US)\n                    </NavLink>\n                </div>\n                </Router>\n            </div>\n            <p className=\"text\">{t('more_lang')}</p>\n       </Fragment>\n    )\n}\n\nexport default Lang\n","import React from 'react'\n\nconst BlackBackground = () => {\n    return (\n        <div className=\"\" id=\"hide_body_id\">\n\n        </div>\n    )\n}\n\nexport default BlackBackground\n","import React from 'react'\n\nconst TitleFb = () => {\n    return (\n        <div className=\"content-fb-title\">\n            <span className=\"title-fb\">Facebook</span>\n        </div>\n    )\n}\n\nexport default TitleFb\n","import React, { Fragment,useState,useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Email from './components/Email';\nimport Password from './components/Password';\nimport ButtonConnexion from './components/ButtonConnexion';\nimport CreateAccount from './components/CreateAccount';\nimport Lang from './components/Lang';\nimport BlackBackground from './components/BlackBackground';\nimport TitleFb from './components/TitleFb';\n\nimport {useTranslation }  from 'react-i18next'\n\n\n\n\nfunction App() {\n \n\n  const [openModal, setOpenModal] = useState(false)\n  let [widthLoading, setWidthLoading] = useState(0)\n  const [shouldCount, setShouldCount] = useState(false)\n\n  const [t, i18n] = useTranslation('common')\n\n\n\n\n\n  const set_animation = ()=>{\n    const hide_body = document.querySelector('#hide_body_id')\n    const loadEl = document.querySelector('#load')\n    hide_body.classList.add('hide_body')\n    setShouldCount(true)\n    loadEl.classList.add(\"loading\")\n  \n  }\n\n\n  useEffect(() => {\n    let interval=null\n     if(shouldCount){\n       interval =  setInterval(() => {\n        let numberByRandom = Math.floor(Math.random() * 10)\n        setWidthLoading(widthLoading+numberByRandom)\n        },500)\n      if(widthLoading>97){\n        setOpenModal(true)\n        clearInterval(interval)\n      }\n     }\n    return ()=>clearInterval(interval)\n  }, [shouldCount,widthLoading])\n\n  \n\n\n  const modalContent = ()=>{\n    return openModal ? (<div className=\"modal_container\">\n    <div className=\"modal\">\n      <p><b>{t('pass_wrong.title')}</b></p>\n      <p>{t('pass_wrong.message')}</p>\n        <button onClick={exitModal} className=\"ok\">ok</button>\n    </div>\n  </div>) : null\n  }\n\n  const exitModal = ()=>{\n    setOpenModal(false)\n    const hide_body = document.querySelector('#hide_body_id')\n    const loadEl = document.querySelector('.loading')\n    hide_body.classList.remove('hide_body')\n    loadEl.classList.remove(\"loading\")\n    setWidthLoading(0)\n    setShouldCount(false)\n  }\n\n\n\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"loading\"id=\"load\" style={{width: widthLoading+\"%\"}}></div>\n          <TitleFb />\n          <div className=\"main\">\n            <Email />\n            <Password />\n            <ButtonConnexion set_animation={set_animation} />\n\n\n            <p className=\"forgot\">\n              {t('forgot_pass')}\n            </p>\n\n              <CreateAccount />\n              <Lang />\n          </div>\n      </div>\n\n      <BlackBackground />\n\n      {modalContent()}\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport common_fr from \"../translations/fr/common.json\";\nimport common_en from \"../translations/en/common.json\";\n\ni18n.init({\n  interpolation: { escapeValue: false },  // React already does escaping\n  lng: 'en',                              // language to use\n  resources: {\n      en: {\n          common: common_en               // 'common' is our custom namespace\n      },\n      fr: {\n          common: common_fr\n      },\n  },\n});\n\nexport default i18n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport i18n from './utils/i18n'\n\n\nimport {I18nextProvider} from \"react-i18next\";\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n        <I18nextProvider i18n={i18n}>\n            <App/>\n        </I18nextProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}